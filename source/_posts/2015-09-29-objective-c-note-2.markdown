---
title: 'Objective-C学习笔记（2）'
layout: post
categories: 技术
tags:
    - Objective-C
---

## 面向对象 ##

### 定义类 ###

Ojbective-C定义类需要分为两个步骤。

- 接口部分：定义该类包含的成员变量和方法
- 实现部分：为该类的方法提供实现

接口定义部分示例：

```
@interface MyClass : NSObject
{
    int         _count;
    id          _data;
    NSString*   _name;
}
- (id) initWithString: (NSString*) aName;
+ (MyClass*) createMyClassWithString:(NSString*) aName;
@end
```

一般来说，会将定义类的皆苦声明部分放在头文件中。也就是说，定义类接口部分的源代码应该命名为.h文件。

方法的声明：

- 方法类型标识：该标识要么是+，要么是-，其中，+代表该方法是类方法，直接用类名即可调用；-代表该方法是实例方法，必须用对象才能调用。
- 方法返回值类型：返回值类型可以是Objective-C允许的任何数据类型，包括基本类型、构造类型和指针类型。如果声明了方法返回值类型，则方法体内必须有一个有效的return语句，该语句返回一个变量或一个表达式，这个变量或者表达式的类型必须与此处生命的类型匹配。除此之外，如果一个方法没有返回值，则必须使用void来声明没有返回值。
- 方法签名关键字：Objective-C的方法签名关键字由方法名、形参标签和冒号组成。方法名命名规则与成员变量命名规则基本相同，但不需要以下划线开头，通常建议方法名以英文动词开头。除第一个形参外，Objective-C建议为后面的每个形参都指定一个“形参标签”，改形参标签可以很好地说明该形参的作用——虽然Objective-C允许省略形参标签，但这并不是一种好的变成习惯，因此建议保留形参标签。一旦在定义方法时制定了形参列表，则调用该方法时必须传入对应的参数值。

Objective-C的方法声明中，所有的类型（包括void）都应该使用圆括号括起来。

Ojbective-C的方法签名中冒号具有特殊意义，比如foo方法和foo:方法时不同的，前者不带冒号，表明是一个不带形参声明的方法；后者带一个冒号，表明它是带一个形参声明的方法。而foo:bar:又是另一个方法，它代表带两个形参声明的方法，其中第二个形参的形参标签是bar。

方法的实现：

- 类实现部分的类型必须与接口部分的类名相同
- 类实现部分也可以在类名后使用“: 父类”来表示继承了某个父类
- 类实现部分也可以声明自己的成员变量，但这些成员变量只能在当前类内访问。因此，在类实现部分声明成员变量相当于定义隐藏的成员变量
- 类实现部分必须为类声明部分的每个方法提供方法定义。

### 对象的产生和使用 ###

定义变量的语法为：

```
类名* 变量名;
```

创建对象的语法为：

```
[[类名 alloc] 初始化方法];
```

alloc是Objective-C的关键字，该关键字负责为改类分配内存空间、创建对象。除此之外，还需要调用初始化方法对改实例执行初始化。由于所有的对象都继承了NSObject类，因此所有的类都有一个默认的初始化方法：init。

Objective-C也支持使用new来创建对象，语法格式为：

```
[类名 new];
```

这种写法基本等同于[[类名 alloc] init]，实际上，这种写法比较少用，通常还是使用第一种语法来创建对象。

Objective-C调用方法的语法格式为：

```
[调用者 方法名:参数 形参标签:参数值 ...]
```

如果方法声明中声明了多个形参，那么调用该方法时需要为每个形参传入相应的参数值。

虽然Objective-C允许调用方法传入参数时，省略形参标签，但省略形参标签的做法会降低程序的可读性，因此不建议省略形参标签。

### id类型 ###

Objective-C提供了一个id类型，这个id类型可以代表所有对象的类型。也就是说，任意类的对象都可以赋值给id类型的变量。

当通过id类型的变量来调用方法时，Objective-C将会执行动态绑定。所谓动态绑定，是指Ojbective-C将会跟踪对象所属的类，它会在运行时判断该对象所属的类，并在运行时确定需要动态调用的方法，而不是在编译时确定要调用的方法。

### 方法 ###

Objective-C的方法不能独立存在，所有的方法都必须定义在类里。方法在逻辑上要么属于类，要么属于对象。

Objective-C调用函数时的传参机制是值传递，都是传入参数的副本。当然，如果使用指针变量作为参数，由于指针变量保存的是副本，因此虽然传入的指针变量的副本，但也是地址传递。

### 形参个数可变的方法 ###

如果在定义方法时，在最后一个形参名后增加逗号和三点，则表明该形参可以接受多个参数值。

```
@interface VarArgs : NSObject
- (void) test:(NSString *) name, ...;
@end
```

为了在程序中获取个数可变的形参，需要使用如下关键字。

- va_list：这是一个类型，用于定义指向可变参数列表的指针变量。
- va_start：这是一个函数，该函数指定开始处理可变形参的列表，并让指针变量指向可变形参列表的第一个参数。
- va_end：结束处理可变形参，释放指针变量。
- va_arg：该函数返回获取指针当前指向的参数的值，并将指针移动到指向下一个参数。

个数可变的形参只能处于形参列表的最后。也就是说，一个方法中最多智能有一个长度可变的形参。

### 成员变量 ###

成员变量值的是在类接口部分或类实现部分定义的变量，Objective-C的成员变量都是实例变量，并不支持真正的类变量。

实例变量的作用于与对应实例的生存范围相同。

访问实例变量通过如下语法：

```
    实例->实例变量
```