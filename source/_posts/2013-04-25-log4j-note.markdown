---
title: 'log4j 的配置文件'
layout: post
categories: 技术
tags:
    - Java
---

Log4j 支持两种配置文件格式，一种是 XML 格式的文件，一种是 Java 特性文件 lg4j.properties （键 = 值）。 


lg4j.properties 文件作为作为常用的配置文件的方法如下： 

- 配置根 Logger 

Logger 负责处理日志记录的大部分操作。 其语法为： 

```
log4j.rootLogger = [ level ] , appenderName, appenderName, … 
```

其中， level 是日志记录的优先级，分为 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 ALL 或者自定义的级别。 Log4j 建议只使用四个级别，优先级从高到低分别是 ERROR 、 WARN 、 INFO 、 DEBUG 。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了 INFO 级别，只有等于及高于这个级别的才进行处理，则应用程序中所有 DEBUG 级别的日志信息将不被打印出来。 ALL: 打印所有的日志， OFF ：关闭所有的日志输出。 appenderName 就是指定日志信息输出到哪个地方。可同时指定多个输出目的地。 

- Appender 

配置日志信息输出目的地 Appender 负责控制日志记录操作的输出。 
其语法为： 

```
log4j.appender.appenderName = fully.qualified.name.of.appender.class 
log4j.appender.appenderName.option1 = value1 
log4j.appender.appenderName.optionN = valueN 
```

其中， Log4j 提供的 appender 有以下几种：

```
org.apache.log4j.ConsoleAppender （控制台）， 
org.apache.log4j.FileAppender （文件）， 
org.apache.log4j.DailyRollingFileAppender （每天产生一个日志文件）， 
org.apache.log4j.RollingFileAppender （文件大小到达指定尺寸的时候产生一个新的文件），可通过 log4j.appender.R.MaxFileSize=100KB 设置文件大小，还可通过 log4j.appender.R.MaxBackupIndex=1 设置为保存一个备份文件。 
org.apache.log4j.WriterAppender （将日志信息以流格式发送到任意指定的地方） 
```

例： 

```
log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
```

定义一个名为 stdout 的输出目的地， ConsoleAppender 为控制台。 

- Layout 

其中， Log4j 提供的 layout 有以下几种： 

```
org.apache.log4j.HTMLLayout （以 HTML 表格形式布局）， 
org.apache.log4j.PatternLayout （可以灵活地指定布局模式）， 
org.apache.log4j.SimpleLayout （包含日志信息的级别和信息字符串）， 
org.apache.log4j.TTCCLayout （包含日志产生的时间、线程、类别等等信息） 
```

- 格式化日志信息 

Log4J 采用类似 C 语言中的 printf 函数的打印格式格式化日志信息，打印参数如下： 

```
%m 输出代码中指定的消息 
%p 输出优先级，即 DEBUG ， INFO ， WARN ， ERROR ， FATAL 
%r 输出自应用启动到输出该 log 信息耗费的毫秒数 
%c 输出所属的类目，通常就是所在类的全名 
%t 输出产生该日志事件的线程名 
%n 输出一个回车换行符， Windows 平台为 “rn” ， Unix 平台为 “n” 
%d 输出日志时间点的日期或时间，默认格式为 ISO8601 ，也可以在其后指定格式，比如： %d{yyyy MMM dd HH:mm:ss,SSS} ，输出类似： 2002 年 10 月 18 日 22 ： 10 ： 28 ， 921 
%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。 
```