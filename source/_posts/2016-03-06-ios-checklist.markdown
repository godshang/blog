---
title: 'iOS Checklist'
layout: post
categories: 技术
tags:
    - iOS
---

## 设置状态栏文本颜色 ##

在Info.plist 添加 View controller-based status bar appearance , 设置值为 NO；添加 Status bar style ，设置为 UIStatusBarStyleLightContent 。

## 设置导航栏文本颜色和背景色 ##

为导航栏设置背景色（THEME_COLOR）和文本颜色：

```objectivec
    [UINavigationBar appearance].barTintColor = THEME_COLOR;
    [UINavigationBar appearance].tintColor = [UIColor whiteColor];
    [UINavigationBar appearance].translucent = NO;
    [UINavigationBar appearance].titleTextAttributes = @{ NSForegroundColorAttributeName:[UIColor whiteColor], NSFontAttributeName: [UIFont systemFontOfSize:20] };
```

## 自定义UITableViewCell的两种方法 ##

### 使用nib ###

xib中指定cell的Class为自定义cell类型

调用 tableView 的 registerNib:forCellReuseIdentifier:方法向数据源注册cell:

```objectivec
    self.tableView registerNib:[UINib nibWithNibName:@"xxxxxCell" bundle:nil] forCellReuseIdentifier:kCellIdentify];
```

在cellForRowAtIndexPath中使用dequeueReuseableCellWithIdentifier:forIndexPath:获取重用的cell，若无重用的cell，将自动使用所提供的nib文件创建cell并返回（若使用旧式dequeueReuseableCellWithIdentifier:方法需要判断返回是否为空而进行新建）:

```objectivec
    xxxxxCell *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentify forIndexPath:indexPath];
```

获取cell时若无可重用cell，将创建新的cell并调用其中的awakeFromNib方法，可通过重写这个方法添加更多页面内容

### 不使用nib ###

重写自定义cell的initWithStyle:withReuseableCellIdentifier:方法进行布局:

```objectivec
    - (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier  
    {  
        self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];  
        if (self)  
        {  
            // cell页面布局  
            [self setupView];  
        }  
        return self;  
    }
```

为tableView注册cell，使用registerClass:forCellReuseIdentifier:方法注册（注意是Class）:

```objectivec
    xxxxxCell *cell = [tableView dequeueReusableCellWithIdentifier:kCellIdentify forIndexPath:indexPath]; 
```

获取cell时若无可重用cell，将调用cell中的initWithStyle:withReuseableCellIdentifier:方法创建新的cell

### 注意 ###

1. dequeueReuseableCellWithIdentifier:与dequeueReuseableCellWithIdentifier:forIndexPath:的区别：
前者不必向tableView注册cell的Identifier，但需要判断获取的cell是否为nil；后者则必须向table注册cell，可省略判断获取的cell是否为空，因为无可复用cell时runtime将使用注册时提供的资源去新建一个cell并返回

2. 自定义cell时，记得将其他内容加到self.contentView 上，而不是直接添加到 cell 本身上

## UITableViewCell设置分隔线 ##

当为UITableViewCell设置imageView的图片后，发现每个cell之间的分隔线，左侧不再从imageView处开始，而是在imageView之后、从textLabel处开始。可以通过如下方法设置从imageView处开始：

```objectivec
    - (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath{
        [cell setSeparatorInset:UIEdgeInsetsZero];
    }
```

或者

```objectivec
    self.tableView.separatorInset = UIEdgeInsetsZero;
```

## UITableView设置多余cell为空白 ##

当UITableView滚动到底部时，多余的cell之间的分隔线依然能够看到。可以通过如下方法将底部设置为空白：

```objectivec
    self.tableView.tableFooterView = [[UIView alloc] initWithFrame:CGRectZero];
```

## 修改UITabBar自定义选中图片的颜色 ##

在为UITabBar设置自定义的图片时，选中的图片显示的是系统默认的蓝色。UITabItem的头文件中有如下定义：

```objectivec
    /* The unselected image is autogenerated from the image argument. The selected image 
     is autogenerated from the selectedImage if provided and the image argument otherwise. 
     To prevent system coloring, provide images with UIImageRenderingModeAlwaysOriginal (see UIImage.h) 
     */  
    - (instancetype)initWithTitle:(NSString *)title image:(UIImage *)image tag:(NSInteger)tag;  
    - (instancetype)initWithTitle:(NSString *)title image:(UIImage *)image selectedImage:(UIImage *)selectedImage NS_AVAILABLE_IOS(7_0);  
    - (instancetype)initWithTabBarSystemItem:(UITabBarSystemItem)systemItem tag:(NSInteger)tag; 
```
如果不希望使用系统颜色，需要对图片加上属性UIImageRenderingModeAlwaysOriginal

```objectivec
    tabBarItem.selectedImage = [[UIImage imageNamed:tabSelectedImageNames[idx]] imageWithRenderingMode
```

