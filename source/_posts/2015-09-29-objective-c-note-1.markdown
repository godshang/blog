---
title: 'Objective-C学习笔记（1）'
layout: post
categories: 技术
tags:
    - Objective-C
---

## 数据类型和运算符 ##

### 标识符 ###

Objective-C语言的标识符必须以字母、下划线（_）、美元符（$）开头，后面可以跟任意数目的字母、数字、下划线（_）和美元符（$）。标识符中不能包括空格，不能使用关键字，标识符的长度没有限制。

Objective-C语言区分大小写，因此abc和ABC是两个不同的标识符。

### 数据类型分类 ###

Objective-C语言要求所有变量必须先声明后使用。

数据类型包括基本类型、构造类型和指针类型。基本类型包括整型、浮点型、字符型和枚举型4类。构造类型包括数组类型、结构体类型和共用体类型3类。指针类型既是C语言最重要的数据类型，也是Objective-C最重要的类型，所有的系统类、自定义类的本质都是指针类型。

除此之外，还有一种特殊的空类型（null type），空类型就是nil值的类型，这种类型没有名称。因为空类型没有名称，所以不能声明一个空类型的变量，或将变量转换成空类型。空引用（nil）是空类型变量唯一的值。空引用（nil）可以转换为任何引用类型。

### 基本数据类型 ###

#### 整型 ####

整型包括如下几种类型。

- short int（简称int）：short型整数在内存中通常占用16位
- int：int型整数在内存中通常占用32位
- long int：long型整数在内存中占用64位
- long long：long long型整数在内存中占64位

Objective-C语言并没有硬性规定各种整数在内存中所占用的空间。通常来说，要求long long型所占内存空间不小于long所占内存空间，long型所占的内存空间应该不小于int所占的内存空间，int型所占的内存空间应该不小于short型所占用的内存空间。

```
测试结果：
在64位的Mac系统上，short int占2字节，int占4字节，long int占8字节，long long占8字节；
在iOS系统上，short int占2字节，int占4字节，long int占4字节，long long占8字节。
```

整数有3种表示方式：十进制、八进制和十六进制，其中八进制的整数常量以0开头，十六进制的整数以0x或者0X开头，其中10~15分别以a~f或A~F来表示。

在4种整型前面添加unsigned关键字，可将它们变成无符号整型。无符号整型的最高位不是符号位，而是数值位，因此无符号整数不能表示负数。但与此同时，无符号整型的最大值比对应的普通整型的最大值大一倍。

#### NSLog输出函数及格式字符 ####

NSLog是Foundation提供的饿一个功能非常强大的输出函数，不仅可以输出字符串，也可以输出整数、C风格的字符串和Objective-C对象。

NSLog函数的第一个参数是一个字符串常量，改字符串中可使用%格式的占位符，这个占位符将会有对应的变量填充。

NSLog支持的格式字符如下所示

```
d       以带符号的十进制形式输出整数（整数不输出符号）
o       以八进制无符号形式输出整数（不输出0前缀）
x       以十六进制无符号形式输出整数（不输出0x前缀）
u       以无符号十进制形式输出整数
c       以字符形式输出，只输出一个字符
s       输出C风格的字符串
f       以小数形式输出浮点数，默认输出6位小数
e       以指数形式输出浮点数，数字部分默认输出6位小数
g       自动选用%f或%e其中之一，保证输出宽度较短的格式，并且不会输出无意义的0
p       以十六进制形式输出指针变量所代表的地址
@       输出Objective-C的对象
```

在%与格式字符之间，还可插入下标所示的附加符号

```
l（字母）               可在格式字符d、o、x、u之前，用于输出长整型整数；也可在f、e、g之前，用于输出长浮点型整数
m（代表一个正整数）     指定输出数据所占的最小宽度
.n                      对于浮点数，表示输出n位小数；对于字符串，表示截取的字符个数
-                       表示输出的数值向左边对齐
```

#### 字符型 ####

字符型用于表示单个的字符，字符常量必须使用单引号引起来。每个字符占用1个字节。

字符型常量有两种表现形式，一个是直接通过单个字符来指定字符常量，例如'A'、'0'等；另一个是通过转义字符表示特殊字符常量，例如'\n'、'\t'等。

char行的值也可以直接作为整数型的值来使用，但它是一个8位的无符号整数，取值范围0~255。

如果把一个在0~255范围内的int整数赋值给char型变量，系统会自动把这个int整数当成char类型来处理。

Objective-C提供了NSString类来表示字符串，字符串由于由多个字符组成，字符串常量使用双括号括起来，并在前面使用@符号，用于区别C语言字符串。如：

```
NSString *s = @"hello,world";
```

#### 浮点型 ####

浮点型有3中：float、double和long double，一般来说，float占用4字节，double占用8字节，long double占用16字节。

浮点数有两种表示形式

- 十进制数形式：这种形式就是平常简单的浮点数，例如，5.12，512.0，.512。浮点数必须包含一个小数点，否则会被当成int类型处理
- 科学计数法形式：例如5.12e2、5.12E2

只有浮点类型的数值才可以使用科学计数法形式表示。

Objective-C的浮点型数值不区分float、double，一个浮点型常数值既可以赋值给float变量，也可以赋值给double变量。

Objective-C还提供了3个特殊的浮点型数值：正无穷大、负无穷大和非数。使用一个正数除以0.0将得到正无穷大，使用一个负数除以0.0强得到负无穷大，0.0除以0.0或对一个负数开方将得到一个非数。所有的正无穷大数值都相等，所有的负无穷大数值都相等，而非数不与任何数值相等，甚至和非数自己都不相等。

注意，室友浮点数除以0.0才可以得到正无穷大或负无穷大，但如果使用整型值除以0.0，将会得到整数值取值范围的边界值。

#### 枚举型 ####

定义枚举变量有两种方式。

- 先定义枚举类型，再用枚举类型定义变量

    enum season {spring, summer, fall, winter};

    enum season myLove, yourLove;

- 定义匿名枚举类型是直接定义变量

    enum {mal, femal} me, you;

关于枚举，有几点说明：

- 定义枚举时大括号中列出的枚举值，也成为枚举常量或枚举元素，这些枚举值不是变量，因此不能对它们复制。实际上，每个枚举常量按它们的定义顺序，依次为0、1、2、3，以此类推。当然也可显示指定枚举常量的值。
- 枚举常量的本质就是无符号整数，因此，枚举值可以用来比较大小。比较大小的规则就是它们实际的整数值。
- 枚举值的本质是无符号整数，因此，Objective-C允许直接将整数赋值给枚举变量，甚至可以直接把枚举变量当成整数使用，比如，用它们来参与四则混合运算。

#### BOOL类型 ####

BOOL类型的值有YES和NO两个值，分别代表真和假。Objective-C底层实际上使用signed char来代表BOOL，YES和NO两个值的底层其实就是1和0。

如果将一个较大的非零整数值赋给BOOL类型的变量，而这个非零整数值的最低8位都是0，那么系统就会把它当成NO处理。

### 类型转换 ###

#### 自动类型转换 ####

自动转换规则如下：

- 把整型类型（包括字符型）的变量和值赋值给浮点型变量，不会有太大变化
- 把浮点型类型的变量和值赋值给整型（包括字符型）变量，数值的小数部分会被直接舍弃
- 当把取值范围大的变量和值赋值给取值范围小的变量时，可能发生溢出

#### 强制类型转换 ####

强制类型转换的运算符是圆括号。

#### 表达式类型的自动提升 ####

当一个算术表达式中包含多个基本类型的值时，整个算术表达式的数据类型将发生自动提升。

- 所有的short型、char型将被提升到int型
- 真个算术表达式的数据类型自动提升到与表达式中最高等级操作数同样的类型。操作数的等级排列由低到高为：short、int、long、long long、float、double、long double。

### 运算符 ###

Objective-C语言中的运算符可分为：算术运算符、赋值运算符、比较运算符、逻辑运算符、位运算符、类型相关运算符。

